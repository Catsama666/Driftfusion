function equilbrium = verify(sol_in, time_fraction)
%
% Inputs:
%   SOL_MATRIX - a solution matrix, not the full struct, as contained in
%     structs created by DF
%   T_ARRAY - the time mesh array, as generated by meshgen_t and included
%     in structs created by DF
%   TIME_FRACTION - numeric between 0 and 1. The smaller the stricter the
%     check. When 1: disable the stability check and simply return true.
%     When zero or strictly included between 0 and 1: check if the
%     solution reached a stabilization. Suggested values: 1e-3 for
%     normal cases, 0 for cases in which the stabilization is very
%     important, 1 for cases in which the first solution is needed.
%
% Outputs:
%   equilbrium - a logic asserting if the solution in input reached its
%     equilbrium

%
%------------- BEGIN CODE --------------

equilbrium = true;

if time_fraction >= 1 || time_fraction < 0 || ~isnumeric(time_fraction)
    warning('Driftfusion:verifyJSkip', [mfilename...
        ' - time_fraction is out of [0,1) range: skipping equilbrium check']);
    return
end

t = sol_in.t;
[J, j, xmesh] = dfana.calcJ(sol_in);
% no need to calculate end_time for each of the 4 solutions: if they
% break they break at the same time
% using t(end) could get a time out of the solution when the computation broke before reaching the final time
end_time = t(length(sol_in(:, 1, 1)));
ppos = getpointpos(sol_in.x(end), xmesh);
figure(n+100) % keep the current density diagram of the first voltage step
plot(t, J.n(:, ppos),t, J.p(:, ppos),t, J.a(:, ppos),t, J.c(:, ppos), t, J.disp(:,ppos), t, J.tot(:, ppos));
legend('Jn', 'Jp', 'Ja', 'Jc', 'Jdisp', 'Jtotal')
xlabel('time [s]');
ylabel('J [A cm^{-2}]');
set(legend,'FontSize',16);
set(legend,'EdgeColor',[1 1 1]);


% Return only the second output value of min, which is time_index
[~, time_index] = min(abs(t - time_fraction * end_time)); % get time mesh index at a specified percentage of maximum time reached


    profile_at_time = J.total(time_index, :, 1); % take profile of values at a certain time of evolution
    profile_end = J.total(end, :, 1); % take profile of values at the end of time


    difference = sum(abs(profile_end - profile_at_time)); % sum up all the differences between the profiles

    threshold = 1e-5 * sum(abs(profile_end - mean(profile_end))); % sum up absolute values, ignore constant bias
    stable = difference <= threshold;

    if stable       
    else
        warning('Driftfusion:verifyJ',...
            'The final solutions did not reach stability. Consider trying with a greater tmax.');
    end
    % true just if all the variables are stabilized
    equilbrium = equilbrium && stable;
end

if equilbrium
    disp("Equilbrium verified");
end

%------------- END OF CODE --------------