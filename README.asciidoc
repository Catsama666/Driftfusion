= DrIFtFUSION software

An open source drift diffusion code based in MATLAB for simulating solar cells.

Please see the link:https://github.com/barnesgroupICL/Driftfusion/wiki[wiki] and the headers of the .m files for complete documentation.

Here just some key points are reported.

== Replicating published paper's data

=== 2018 - Impedance Spectroscopy on homojunction model, applying an oscillating voltage profile

The article is available for link:https://arxiv.org/abs/1805.06446[download on arXiv].

Check out the `2018-EIS` branch of this repository or link:https://github.com/barnesgroupICL/Driftfusion/archive/2018-EIS.zip[download directly just this branch].

 git checkout 2018-EIS

Open MATLAB and set this as the working directory.

In MATLAB, generate stabilised solutions with link:https://github.com/barnesgroupICL/Driftfusion/blob/2018-EIS/equilibrate.m[equilibrate]:

 >> [sol_eq, sol_eq_SR, sol_i_eq, sol_i_eq_SR, ssol_eq, ssol_eq_SR, ssol_i_eq, ssol_i_eq_SR, sol_1S, sol_1S_SR, sol_i_1S, sol_i_1S_SR, ssol_1S, ssol_1S_SR, ssol_i_1S, ssol_i_1S_SR] = equilibrate(pinParams)

or, quicker with link:https://github.com/barnesgroupICL/Driftfusion/blob/2018-EIS/equilibrate_minimal.m[equilibrate_minimal]:

 >> [sol_eq, sol_i_eq, sol_i_eq_SR, ssol_i_eq, ssol_i_eq_SR, sol_i_1S_SR, ssol_i_1S_SR] = equilibrate_minimal(pinParams)

For simulating a different set of parameters, specify the relative pinParams file as an argument to equilibrate:

 >> [~, ~, sol_i_eq_SR, ~, ssol_i_eq_SR, sol_i_1S_SR, ssol_i_1S_SR] = equilibrate_minimal(pinParams_10kxSRH_001xmajority)

Simulate impedance spectroscopy with oscillating voltage on a single solution with link:https://github.com/barnesgroupICL/Driftfusion/blob/2018-EIS/ISwave_EA_single_exec.m[ISwave_EA_single_exec]:

 >> ssol_i_1S_SR_is_100Hz_50mV = ISwave_EA_single_exec(asymmetricize(ssol_i_1S_SR), 5e-2, 1e2, 20, 40, true, false, 1e-8)

Analyse the obtained solution with link:https://github.com/barnesgroupICL/Driftfusion/blob/2018-EIS/ISwave_single_analysis.m[ISwave_single_analysis]:

 >> ISwave_single_analysis(ssol_i_1S_SR_is_100Hz_50mV, false, true)

Generate a cell with solutions at various illuminations at open circuit conditions with link:https://github.com/barnesgroupICL/Driftfusion/blob/2018-EIS/genIntStructs.m[genIntStructs]:

 >> [structs_oc, VOCs, ~] = genIntStructs(ssol_i_eq_1S, 1, 1e-3, 7, true)

or, more accurate but slower with link:https://github.com/barnesgroupICL/Driftfusion/blob/2018-EIS/genIntStructsRealVoc.m[genIntStructsRealVoc]:

 >> [structs_oc_realvoc, VOCs_real] = genIntStructsRealVoc(ssol_i_eq_SR, 1, 1e-3, 7, true)

Generate a cell with solutions in dark at various applied voltages with link:https://github.com/barnesgroupICL/Driftfusion/blob/2018-EIS/genVappStructs.m[genVappStructs]:

 >> structs_vapp = genVappStructs(sol_i_eq_SR, [0, 0.2, 0.4, 0.6, 0.8])

Simulate the impedance spectroscopy with oscillating voltage on a cell containing various structures (at different illuminations or applied voltages) with link:https://github.com/barnesgroupICL/Driftfusion/blob/2018-EIS/ISwave_full_exec.m[ISwave_full_exec]:

 >> ISwave_oc = ISwave_full_exec(structs_oc, 1e9, 1e-2, 23, 2e-3, false, true, true)

Complete documentation for each function is in the header of the relative file, which can be found link:https://github.com/barnesgroupICL/Driftfusion/tree/2018-EIS[here].

This page can be accessed also in the Driftfusion link:https://github.com/barnesgroupICL/Driftfusion/wiki/2018-Impedance-Spectroscopy[wiki].

== Unit testing

 >> runtests('examples_unit_test')
